import pygame
import sys
import logging
import re

pygame.init()

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
FPS = 60
BACKGROUND_COLOR = (10, 10, 20)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger('WarOfCellsGame')


def validate_ip_port(ip, port):
    ip_pattern = r"^(\d{1,3}\.){3}\d{1,3}$"
    if not re.match(ip_pattern, ip):
        return False, "Invalid IP format"

    parts = ip.split(".")
    if not all(0 <= int(part) <= 255 for part in parts):
        return False, "Each IP segment must be between 0–255"

    try:
        port = int(port)
        if not (1024 <= port <= 65535):
            return False, "Port must be in range 1024–65535"
    except ValueError:
        return False, "Port must be a number"

    return True, ""


class MenuWindow:
    def __init__(self):
        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
        pygame.display.set_caption("War of Cells Game")
        self.clock = pygame.time.Clock()
        self.font = pygame.font.SysFont('Arial', 24)
        self.small_font = pygame.font.SysFont('Arial', 18)

        # menu config
        self.modes = ["Single player", "Local multiplayer", "Online game"]
        self.selected_mode = 0
        self.ip_input = "127.0.0.1"
        self.port_input = "12345"
        self.active_input = None  # "ip" or "port"
        self.error_message = ""

        self.running = True
        self.menu_loop()

    def draw_text(self, text, x, y, selected=False, small=False):
        color = (0, 255, 0) if selected else (255, 255, 255)
        font = self.small_font if small else self.font
        rendered = font.render(text, True, color)
        self.screen.blit(rendered, (x, y))

    def menu_loop(self):
        while self.running:
            self.handle_events()
            self.render()
            pygame.display.flip()
            self.clock.tick(FPS)

    def render(self):
        self.screen.fill(BACKGROUND_COLOR)
        self.draw_text("Select game mode:", 50, 50)

        for i, mode in enumerate(self.modes):
            self.draw_text(mode, 80, 100 + i * 40, i == self.selected_mode)

        self.draw_text(f"IP Address: {self.ip_input}", 400, 100, self.active_input == "ip", small=True)
        self.draw_text(f"Port: {self.port_input}", 400, 150, self.active_input == "port", small=True)

        self.draw_text("ENTER = Confirm and start game", 50, 500, small=True)
        self.draw_text("TAB = Switch input field", 50, 530, small=True)

        if self.error_message:
            error_rendered = self.small_font.render(self.error_message, True, (255, 50, 50))
            self.screen.blit(error_rendered, (50, 560))

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                logger.info("Menu closed.")
                pygame.quit()
                sys.exit()

            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_DOWN:
                    self.selected_mode = (self.selected_mode + 1) % len(self.modes)
                elif event.key == pygame.K_UP:
                    self.selected_mode = (self.selected_mode - 1) % len(self.modes)

                elif event.key == pygame.K_TAB:
                    if self.active_input == "ip":
                        self.active_input = "port"
                    else:
                        self.active_input = "ip"

                elif event.key == pygame.K_RETURN:
                    is_valid, error = validate_ip_port(self.ip_input, self.port_input)
                    if not is_valid:
                        self.error_message = error
                        logger.warning(f"Validation error: {error}")
                    else:
                        config = {
                            "mode": self.modes[self.selected_mode],
                            "ip": self.ip_input,
                            "port": self.port_input
                        }
                        logger.info(f"Configuration saved: {config}")
                        self.error_message = ""
                        self.running = False  # exit menu

                elif self.active_input:
                    if event.key == pygame.K_BACKSPACE:
                        if self.active_input == "ip":
                            self.ip_input = self.ip_input[:-1]
                        elif self.active_input == "port":
                            self.port_input = self.port_input[:-1]
                    else:
                        if self.active_input == "ip":
                            self.ip_input += event.unicode
                        elif self.active_input == "port" and event.unicode.isdigit():
                            self.port_input += event.unicode


def main():
    MenuWindow()


if __name__ == "__main__":
    main()
